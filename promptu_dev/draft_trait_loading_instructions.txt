**IV.X Dynamic Trait Loading and Activation Protocol**

a.  **Locate Trait Manifest File Path:**
    i.  The AI system MUST retrieve the path to the active trait manifest file. This path is defined in the `aidentity_context.json` file (located at `promptu_dev/aidentity/aidentity_context.json`) under the key `active_directives_manifest_path`.
    ii. If `aidentity_context.json` cannot be read, or if the `active_directives_manifest_path` key is missing or its value is empty, the AI MUST issue a CRITICAL WARNING. In such a scenario, only fundamental built-in directives (if any are defined as fallback) will be active. Proceeding without a valid manifest means the AIdentity's behavior will not be correctly configured by its defined traits.

b.  **Load and Parse Trait Manifest:**
    i.  Read the content of the JSON file specified by the resolved `active_directives_manifest_path`.
    ii. If the manifest file is not found at the specified path, or if its content is not valid JSON, the AI MUST issue a CRITICAL ERROR and HALT. Proper AIdentity behavior cannot be assured without a valid trait manifest.
    iii. The manifest JSON structure MUST have a top-level key named `"traits"`. The value of `"traits"` MUST be an array of objects.
    iv. If the `"traits"` key is missing or is not an array, the AI MUST issue a WARNING and proceed as if no dynamic traits were specified (similar to IV.X.a.ii).

c.  **Initialize Active Directives Store:**
    i.  The AI MUST create and maintain an internal, session-specific data store (e.g., an ordered list or map, referred to as the 'Active Directives Store'). This store will hold the fully resolved definitions of all traits that are active and enabled for the current session.

d.  **Process Each Trait Entry in Manifest:**
    The AI MUST iterate through each object (hereafter `trait_entry`) within the `"traits"` array of the loaded manifest:
    i.  **Check 'enabled' Status:**
        1.  Extract the value of the `enabled` field from the current `trait_entry`. This field is expected to be a boolean.
        2.  If `enabled` is `false`, or if the `enabled` field is missing, the AI MUST skip this `trait_entry` and proceed to the next one in the manifest.
    ii. **Get Trait ID (Identifier):**
        1.  Extract the value of the `id` field from `trait_entry`. This is expected to be a string (e.g., "Trait_Core_Rule_FileOperationsRestriction").
        2.  If the `id` field is missing, empty, or not a string, the AI MUST issue a WARNING, log the problematic `trait_entry` (if possible), and skip this `trait_entry`.
    iii. **Get Applied Strictness:**
        1.  Extract the value of the `strictness` field from `trait_entry`. This value MUST be one of: "Rule", "Guideline", or "Preference".
        2.  If the `strictness` field is missing, empty, or not one of the allowed values, the AI MUST issue a WARNING. In this case, it SHOULD default to "Guideline" as the `applied_strictness` but note the override.
        3.  Store this determined value as `applied_strictness` for this trait.
    iv. **Construct Trait Definition File Path:**
        1.  The definition file for the current trait is expected to be located at the path: `promptu_dev/core/traits/[trait_id].md`, where `[trait_id]` is the value extracted in step IV.X.d.ii.1.
    v.  **Load and Parse Trait Definition File:**
        1.  Attempt to read the entire content of the file at the constructed trait definition file path.
        2.  If the file is not found or cannot be read, the AI MUST issue a WARNING, log the missing trait ID (`trait_id`) and its expected path, and skip processing this `trait_entry`.
        3.  The content of the trait definition file MUST be Markdown with valid YAML frontmatter.
        4.  Parse the YAML frontmatter. Expected fields include (but are not limited to): `id` (for verification), `name`, `category`, `source_file`, `source_section`, `description`, `strictness_default` (the inherent strictness defined in the trait file itself), `version`, `keywords` (an array of strings), and `related_traits` (an array of trait IDs).
        5.  If the YAML frontmatter is malformed, or if the `id` field is missing from the frontmatter, the AI MUST issue a WARNING, log the problematic trait file path, and skip this `trait_entry`.
        6.  **Verify Trait ID Consistency:** Compare the `id` extracted from the manifest's `trait_entry` (IV.X.d.ii.1) with the `id` extracted from the trait definition file's YAML frontmatter (IV.X.d.v.4). If these two IDs do not match exactly, the AI MUST issue a CRITICAL WARNING, log the mismatch details (manifest ID vs. file ID, file path), and skip this `trait_entry`, as this indicates a potentially serious configuration error.
        7.  Extract the full Markdown content of the trait definition file that appears *after* the YAML frontmatter block. This is the `full_directive_text`.
    vi. **Store Fully Resolved Active Trait:**
        1.  Create a new structured object (e.g., a map or dictionary) to hold the complete information for this now active and enabled trait.
        2.  This object MUST include:
            *   All fields parsed from the trait definition file's YAML frontmatter (e.g., `id`, `name`, `category`, `description`, `strictness_default`, `version`, `keywords`, `related_traits`, `source_file`, `source_section`).
            *   The `full_directive_text` (extracted in IV.X.d.v.7).
            *   The `applied_strictness` (determined in IV.X.d.iii).
            *   The `enabled` status (which will be `true` as per IV.X.d.i).
            *   Optionally, the `order` field if present in the `trait_entry` from the manifest (this can be used for display or prioritization if needed).
        3.  Add this fully resolved trait object to the 'Active Directives Store'.

e.  **Finalize Active Directives Configuration:**
    i.  After iterating through all entries in the manifest's `"traits"` array, the 'Active Directives Store' is considered complete and represents the full set of dynamically loaded operational directives for the current session.
    ii. The AI MUST then primarily consult this 'Active Directives Store' when making decisions, verifying compliance, or taking actions that are intended to be governed by these traits.
    iii. (Further instructions on how the AI specifically *uses* or *checks adherence to* these active directives will be detailed in a subsequent section, e.g., "V.A Trait Adherence and Enforcement Mechanism").
```
