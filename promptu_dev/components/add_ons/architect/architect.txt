[[COMPONENT_INSTRUCTIONS_FOR_architect]]
# Component: architect
# Description: Manages a two-phase architectural workflow: initial draft generation and interactive review.
# Version: 1.0

LOG: Architect component execution started.

# --- Parameter Validation ---
LOG: Validating OPERATING_PHASE.
IF parameters.OPERATING_PHASE == "":
    MESSAGE_USER: ERROR - OPERATING_PHASE is not set. Please specify "GenerateInitialDraft" or "InteractiveReview".
    ACTION: TerminateWithError message="OPERATING_PHASE is required."
ELSEIF parameters.OPERATING_PHASE != "GenerateInitialDraft" && parameters.OPERATING_PHASE != "InteractiveReview":
    MESSAGE_USER: ERROR - Invalid OPERATING_PHASE: "[parameters.OPERATING_PHASE]". Must be "GenerateInitialDraft" or "InteractiveReview".
    ACTION: TerminateWithError message="Invalid OPERATING_PHASE."
ENDIF
LOG: OPERATING_PHASE is "[parameters.OPERATING_PHASE]".

# --- Main Workflow Branching ---
IF parameters.OPERATING_PHASE == "GenerateInitialDraft":
    LOG: Calling Phase1_GenerateInitialDraft.
    [[CALL_SUB_WORKFLOW Phase1_GenerateInitialDraft]]
ELSEIF parameters.OPERATING_PHASE == "InteractiveReview":
    LOG: Calling Phase2_InteractiveReview.
    [[CALL_SUB_WORKFLOW Phase2_InteractiveReview]]
ENDIF

LOG: Architect component execution finished.

# ------------------------------------------------------------------------------
# --- SUB-WORKFLOW DEFINITIONS ---
# ------------------------------------------------------------------------------

# === Phase 1: Generate Initial Draft ===
[[DEFINE_SUB_WORKFLOW Phase1_GenerateInitialDraft]]
    LOG: Phase 1: GenerateInitialDraft started.

    # Validate required parameters for Phase 1
    LOG: Validating INITIAL_REQUIREMENTS_INPUT for Phase 1.
    IF parameters.INITIAL_REQUIREMENTS_INPUT == "":
        MESSAGE_USER: ERROR - INITIAL_REQUIREMENTS_INPUT is required for GenerateInitialDraft phase.
        ACTION: TerminateWithError message="INITIAL_REQUIREMENTS_INPUT is required for GenerateInitialDraft."
    ENDIF
    LOG: INITIAL_REQUIREMENTS_INPUT found.

    # Generate Session ID
    IF parameters.COMPONENT_INSTANCE_ID != "":
        IF string_length(parameters.COMPONENT_INSTANCE_ID) > 8:
            INTERNAL_STATE: current_session_id = substring(parameters.COMPONENT_INSTANCE_ID, -8) # Example: take last 8 chars
        ELSE:
            INTERNAL_STATE: current_session_id = parameters.COMPONENT_INSTANCE_ID
        ENDIF
    ELSE:
        INTERNAL_STATE: current_session_id = "ses" + substring(timestamp_ms(), -5) # Example: "ses12345"
    ENDIF
    LOG: Generated current_session_id: "[internal_state.current_session_id]".
    MESSAGE_USER: Starting architectural draft generation for session ID: [internal_state.current_session_id]. Project: [parameters.PROJECT_NAME], Iteration: [parameters.ITERATION_ID].

    # Construct Output Paths
    INTERNAL_STATE: session_output_dir = parameters.OUTPUT_BASE_DIR + "/" + internal_state.current_session_id
    LOG: Session output directory will be: [internal_state.session_output_dir]

    INTERNAL_STATE: temp_processed_req_template = parameters.PROCESSED_REQUIREMENTS_FILENAME_TEMPLATE.replace("{{PROJECT_NAME}}", parameters.PROJECT_NAME)
    INTERNAL_STATE: processed_req_filename = temp_processed_req_template.replace("{{SESSION_ID}}", internal_state.current_session_id)
    INTERNAL_STATE: processed_req_filepath = internal_state.session_output_dir + "/" + internal_state.processed_req_filename

    INTERNAL_STATE: temp_main_spec_template = parameters.MAIN_DRAFT_SPEC_FILENAME_TEMPLATE.replace("{{PROJECT_NAME}}", parameters.PROJECT_NAME)
    INTERNAL_STATE: main_spec_filename = temp_main_spec_template.replace("{{SESSION_ID}}", internal_state.current_session_id)
    INTERNAL_STATE: main_spec_filepath = internal_state.session_output_dir + "/" + internal_state.main_spec_filename

    INTERNAL_STATE: temp_selections_doc_template = parameters.SELECTIONS_DOC_FILENAME_TEMPLATE.replace("{{PROJECT_NAME}}", parameters.PROJECT_NAME)
    INTERNAL_STATE: selections_doc_filename = temp_selections_doc_template.replace("{{SESSION_ID}}", internal_state.current_session_id)
    INTERNAL_STATE: selections_doc_filepath = internal_state.session_output_dir + "/" + internal_state.selections_doc_filename

    INTERNAL_STATE: temp_checklist_template = parameters.REVIEW_CHECKLIST_FILENAME_TEMPLATE.replace("{{PROJECT_NAME}}", parameters.PROJECT_NAME)
    INTERNAL_STATE: checklist_filename = temp_checklist_template.replace("{{SESSION_ID}}", internal_state.current_session_id)
    INTERNAL_STATE: checklist_filepath = internal_state.session_output_dir + "/" + internal_state.checklist_filename

    # Create Output Directory
    LOG: Creating directory: [internal_state.session_output_dir]
    ACTION: CreateDirectory path=internal_state.session_output_dir
    MESSAGE_USER: Output directory created at [internal_state.session_output_dir].

    # Process Initial Requirements
    LOG: Processing INITIAL_REQUIREMENTS_INPUT: "[parameters.INITIAL_REQUIREMENTS_INPUT]"
    INTERNAL_STATE: temp.requirements_content = read_file(parameters.INITIAL_REQUIREMENTS_INPUT) # Assumes it's a path
    ACTION: CreateFile path=internal_state.processed_req_filepath content=internal_state.temp.requirements_content
    MESSAGE_USER: Copied initial requirements to [internal_state.processed_req_filepath].

    # Research Step (Abstracted)
    LOG: Beginning research based on requirements and reference materials.
    MESSAGE_USER: Performing research and analysis based on your requirements and provided materials ([parameters.REFERENCE_MATERIALS_LIST], [parameters.METHODOLOGY_GUIDES_LIST])...
    INTERNAL_STATE: temp.research_findings = "Abstracted research summary: Key technologies identified are X, Y, Z. Architectural patterns considered: A, B. Constraints: C1, C2."
    LOG: Research findings: [internal_state.temp.research_findings]

    # Generate Main Architectural Specification (Abstracted)
    LOG: Generating main architectural specification.
    MESSAGE_USER: Generating the main architectural specification document...
    INTERNAL_STATE: temp.main_spec_content = "## Main Architectural Specification - " + parameters.PROJECT_NAME + " - Session " + internal_state.current_session_id + "

"
    INTERNAL_STATE: temp.main_spec_content += "Based on requirements at: " + internal_state.processed_req_filepath + "
"
    INTERNAL_STATE: temp.main_spec_content += "Research Summary: " + internal_state.temp.research_findings + "

"
    IF parameters.PROPOSED_OUTLINE_SOURCE != "":
        LOG: Using proposed outline from [parameters.PROPOSED_OUTLINE_SOURCE].
        INTERNAL_STATE: temp.proposed_outline_content = read_file(parameters.PROPOSED_OUTLINE_SOURCE)
        INTERNAL_STATE: temp.main_spec_content += "## Guided Outline Sections
" + internal_state.temp.proposed_outline_content + "

"
    ELSE:
        LOG: No proposed outline provided. Generating standard outline.
        INTERNAL_STATE: temp.main_spec_content += "## Standard Outline Sections
1. Introduction
2. Goals & Constraints
3. System Overview
4. Component Breakdown
5. Data Model
6. Deployment Strategy
7. Future Considerations

"
    ENDIF
    INTERNAL_STATE: temp.main_spec_content += "Further detailed sections to be populated based on full analysis...
"
    ACTION: CreateFile path=internal_state.main_spec_filepath content=internal_state.temp.main_spec_content
    MESSAGE_USER: Main architectural specification generated: [internal_state.main_spec_filepath].

    # Generate Selections Document Outline (Abstracted)
    LOG: Generating architectural selections document.
    MESSAGE_USER: Generating architectural selections document outline...
    INTERNAL_STATE: temp.selections_content = "## Architectural Selections - " + parameters.PROJECT_NAME + " - Session " + internal_state.current_session_id + "

"
    INTERNAL_STATE: temp.selections_content += "This document will track key architectural decisions and selections.

"
    INTERNAL_STATE: temp.selections_content += "### Key Decision Areas (derived from spec outline):
- Technology Stack Choices
- Data Storage Solutions
- Integration Patterns
- Security Measures
"
    ACTION: CreateFile path=internal_state.selections_doc_filepath content=internal_state.temp.selections_content
    MESSAGE_USER: Architectural selections document generated: [internal_state.selections_doc_filepath].

    # Generate Review Checklist (Abstracted)
    LOG: Generating review checklist.
    MESSAGE_USER: Generating review checklist...
    INTERNAL_STATE: temp.checklist_content = "## Review Checklist - " + parameters.PROJECT_NAME + " - Session " + internal_state.current_session_id + "

"
    INTERNAL_STATE: temp.checklist_content += "Use this checklist to review the generated architectural documents.

"
    INTERNAL_STATE: temp.checklist_content += "- [ ] Review Introduction: Clarity and Scope
- [ ] Review Goals & Constraints: Completeness
- [ ] Review System Overview: Understandability
- [ ] ... (further items based on spec outline)
"
    ACTION: CreateFile path=internal_state.checklist_filepath content=internal_state.temp.checklist_content
    MESSAGE_USER: Review checklist generated: [internal_state.checklist_filepath].

    # Completion & Submission
    LOG: Phase 1 generation complete.
    MESSAGE_USER: Initial architectural draft generation for session [internal_state.current_session_id] is complete. Files are located in [internal_state.session_output_dir].
    MESSAGE_USER: Key files: Main Spec ([internal_state.main_spec_filename]), Selections ([internal_state.selections_doc_filename]), Checklist ([internal_state.checklist_filename]).

    INTERNAL_STATE: commit_message = "Architect: Phase 1 generation for " + parameters.PROJECT_NAME + " (Session: " + internal_state.current_session_id + ")"
    INTERNAL_STATE: branch_name = "feat/arch-draft-" + internal_state.current_session_id
    LOG: Submitting changes with commit message: '[internal_state.commit_message]' to branch '[internal_state.branch_name]'
    ACTION: SubmitChanges branch_name=internal_state.branch_name commit_message=internal_state.commit_message
    MESSAGE_USER: Architectural documents submitted to repository.

    LOG: Phase 1: GenerateInitialDraft finished.
[[END_DEFINE_SUB_WORKFLOW Phase1_GenerateInitialDraft]]


# === Phase 2: Interactive Review ===
[[DEFINE_SUB_WORKFLOW Phase2_InteractiveReview]]
    LOG: Phase 2: InteractiveReview started.

    # Validate required parameters for Phase 2
    LOG: Validating SESSION_ID_TO_REVIEW for Phase 2.
    IF parameters.SESSION_ID_TO_REVIEW == "":
        MESSAGE_USER: ERROR - SESSION_ID_TO_REVIEW is required for InteractiveReview phase.
        ACTION: TerminateWithError message="SESSION_ID_TO_REVIEW is required for InteractiveReview."
    ENDIF
    INTERNAL_STATE: current_session_id = parameters.SESSION_ID_TO_REVIEW
    LOG: SESSION_ID_TO_REVIEW is "[internal_state.current_session_id]".
    MESSAGE_USER: Starting interactive review for session ID: [internal_state.current_session_id].

    # Define Paths for Review
    INTERNAL_STATE: session_output_dir = parameters.OUTPUT_BASE_DIR + "/" + internal_state.current_session_id
    LOG: Session directory for review: [internal_state.session_output_dir]

    INTERNAL_STATE: temp_main_spec_template = parameters.MAIN_DRAFT_SPEC_FILENAME_TEMPLATE.replace("{{PROJECT_NAME}}", parameters.PROJECT_NAME)
    INTERNAL_STATE: main_spec_filename = temp_main_spec_template.replace("{{SESSION_ID}}", internal_state.current_session_id)
    INTERNAL_STATE: main_spec_filepath = internal_state.session_output_dir + "/" + internal_state.main_spec_filename

    INTERNAL_STATE: temp_selections_doc_template = parameters.SELECTIONS_DOC_FILENAME_TEMPLATE.replace("{{PROJECT_NAME}}", parameters.PROJECT_NAME)
    INTERNAL_STATE: selections_doc_filename = temp_selections_doc_template.replace("{{SESSION_ID}}", internal_state.current_session_id)
    INTERNAL_STATE: selections_doc_filepath = internal_state.session_output_dir + "/" + internal_state.selections_doc_filename

    INTERNAL_STATE: temp_checklist_template = parameters.REVIEW_CHECKLIST_FILENAME_TEMPLATE.replace("{{PROJECT_NAME}}", parameters.PROJECT_NAME)
    INTERNAL_STATE: checklist_filename = temp_checklist_template.replace("{{SESSION_ID}}", internal_state.current_session_id)
    INTERNAL_STATE: checklist_filepath = internal_state.session_output_dir + "/" + internal_state.checklist_filename

    LOG: Files for review: Main Spec ([internal_state.main_spec_filepath]), Selections ([internal_state.selections_doc_filepath]), Checklist ([internal_state.checklist_filepath]).
    MESSAGE_USER: Loading documents from session [internal_state.current_session_id] for review.

    # Conceptual Interactive Loop
    LOG: Entering conceptual interactive review loop.
    MESSAGE_USER: Starting interactive review for session [internal_state.current_session_id]. Please provide your feedback section by section. Type 'done' when you are finished with the entire review.

    INTERNAL_STATE: temp.review_loop_comment = "Conceptual Loop: The AI would now typically present a section from the [" + internal_state.checklist_filename + "] or [" + internal_state.main_spec_filename + "]. It would then use REQUEST_USER_INPUT to get feedback, proposed changes for the spec, or decisions for the [" + internal_state.selections_doc_filename + "]. This process would repeat for each section. For example: 'Presenting Section 1: Introduction. Please provide feedback or approved content.' -> REQUEST_USER_INPUT -> 'Updating main_spec.md and selections_log.md based on your input for Section 1.'"
    LOG: [internal_state.temp.review_loop_comment]
    MESSAGE_USER: [internal_state.temp.review_loop_comment]
    MESSAGE_USER: This is a placeholder for the interactive review process. In a real session, we would go section by section. For now, imagine this process has completed.

    INTERNAL_STATE: temp.user_final_action = "done"
    LOG: User indicated review completion (simulated as '[internal_state.temp.user_final_action]').

    # Finalization & Submission
    LOG: Interactive review phase concluded by user.
    MESSAGE_USER: Interactive review for session [internal_state.current_session_id] is marked as complete.

    REQUEST_USER_INPUT: prompt="Do you want to commit the reviewed architectural documents? (yes/no)" store_in_variable="user_commit_decision"
    IF global.user_commit_decision == "yes":
        INTERNAL_STATE: commit_message = "Architect: Phase 2 review updates for " + parameters.PROJECT_NAME + " (Session: " + internal_state.current_session_id + ")"
        INTERNAL_STATE: branch_name = "feat/arch-review-" + internal_state.current_session_id
        LOG: Submitting changes with commit message: '[internal_state.commit_message]' to branch '[internal_state.branch_name]'
        ACTION: SubmitChanges branch_name=internal_state.branch_name commit_message=internal_state.commit_message
        MESSAGE_USER: Reviewed architectural documents submitted to repository.
    ELSE:
        MESSAGE_USER: Reviewed documents not committed. You can find them in [internal_state.session_output_dir].
    ENDIF

    LOG: Phase 2: InteractiveReview finished.
[[END_DEFINE_SUB_WORKFLOW Phase2_InteractiveReview]]

[[END_COMPONENT_INSTRUCTIONS_FOR_architect]]
